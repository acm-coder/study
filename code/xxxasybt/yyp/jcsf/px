// 冒泡排序

int main() {
    cin >> n;
    for (int i = 0; i < n; ++ i) cin >> nums[i];
    
    for (int i = 0; i < n; ++ i) {
        for (int j = 0; j < n - 1 - i; ++ j)
            if (nums[j] > nums[j + 1])
                swap(nums[j], nums[j + 1]), ++ a;
    }
    cout << a;
    return 0;
}

// 选择排序



// 归并排序


long long merge_sort(int l, int r) {
    if (l == r) return 0;
    static int tt[N];
    long long mid = l + r >> 1, ll = l, rr = mid + 1, t = 0;
    t += merge_sort(l, mid), t += merge_sort(mid + 1, r);
    
    int idx = l;
    while(ll <= mid && rr <= r) {
        if (nums[ll] <= nums[rr]) tt[idx ++] = nums[ll ++];
        else t += mid - ll + 1, tt[idx ++] = nums[rr ++];
    }
    
    while(ll <= mid) tt[idx ++] = nums[ll ++];
    while(rr <= r) tt[idx ++] = nums[rr ++];
    
    for (int i = l; i <= r; ++ i) nums[i] = tt[i];
    return t;
}


int main() {
    cin >> n;
    for (int i = 0; i < n; ++ i) cin >> nums[i];
    cout << merge_sort(0, n - 1);
    // cout << a;
    return 0;
}


// 快速排序


void quick_sort(int l, int r) {
    if (l == r) return ;
    Stu mid = stu[l + r >> 1];
    int ll = l - 1, rr = r + 1;
    while(ll < rr) {
        do ++ ll; while(stu[ll] > mid);
        do -- rr; while(mid > stu[rr]);
        if (ll < rr) stu[ll].swap(stu[rr]);
    }
    quick_sort(l, rr), quick_sort(rr + 1, r);
}

// 计数排序

int main() {
    cin >> n;
    
    for (int i = 0; i < n; ++ i) {
        cin >> a;
        if (!nums[a]) ++ b;
        nums[a] ++;
        
    }
    cout << b << endl;
    for (int i = 1; i <= 1000; ++ i)
        if (nums[i])
            cout << i << ' ';
    return 0;
}


